import {
  ActionRow,
  ActionRowBuilder,
  ApplicationCommandOptionType,
  ApplicationCommandType,
  Attachment,
  AttachmentBuilder,
  ButtonBuilder,
  ButtonInteraction,
  ButtonStyle,
  ChatInputCommandInteraction,
  ComponentType,
  EmbedBuilder,
  Message,
  MessageActionRowComponentBuilder,
  MessageComponentInteraction,
  PermissionsBitField,
  TextChannel,
} from "discord.js";
import Command from "../../base/classes/MessageCreate";
import CustomClient from "../../base/classes/CustomClient";
import Category from "../../base/enums/Category";
import mainembed from "../../addition/embeds/mainEmbed";
import embedsuccess from "../../addition/embeds/embedsuccess";
import randomwordSuccess from "../../addition/words/success";
import randomwords from "../../addition/words/splitwords";
import warningembed_1 from "../../addition/embeds/warnembed";
import randomwordWarnWords from "../../addition/words/endtime";
import rank from "../../addition/functions/rank";
import schemaPlayer from "../../schema/rouletteGamePlayer";
import schemaGame from "../../schema/rouletteGame";
import fun from "../../addition/functions/rank";
import path from "path";
// const { createWheel } = require('../../addition/roulette/wheel');
import GIFEncoder from 'gifencoder';
import { createCanvas, loadImage } from 'canvas';
const { Wheel } = require('roulette-gif')
const wheel = new Wheel()
const emojis = [
  '1Ô∏è‚É£',
  '2Ô∏è‚É£',
  '3Ô∏è‚É£',
  '4Ô∏è‚É£',
  '5Ô∏è‚É£',
  '6Ô∏è‚É£',
  '7Ô∏è‚É£',
  '8Ô∏è‚É£',
  '9Ô∏è‚É£',
  'üîü',
  '<:eleven:989246551077564436>',
  '<:twelve:989246551929008200>',
  '<:thirteen:989246553451532340>',
  '<:fourteen:989246554529464400>',
  '<:fifteen:989246544370888754>',
  '<:sixteen:989246545281052724>',
  '<:seventeen:989246546644197406>',
  '<:eighteen:989246547873124442>',
  '<:nineteen:989246548904915034>',
  '<:twenty:989246550100279408>',
];

export default class ŸÉÿ™ extends Command {
  constructor(client: CustomClient) {
    super(client, {
      name: "ÿ±ŸàŸÑŸäÿ™",
      description: "ŸÑÿπÿ®Ÿá ÿ±ŸàŸÑŸäÿ™",
      category: Category.Game,
      cooldown: 3,
      aliases: ["roulette"],
    });
  }
  async execute(message: Message) {
    try {
      const idMap = new Map<string, { guildId: string; channelId: string; number: number }>();
      const playersMap: Array<{ winner?: boolean; user: any; username: string; number: number; image: string }> = [];
      
      const randomKey = Object.keys(randomwords)[Math.floor(Math.random() * Object.keys(randomwords).length)];
      const randomValue = randomwords[randomKey];
  
      const findData = await schemaGame.findOne({
        guildId: message.guild?.id,
        channelId: message.channel.id,
      });
  
      const emb = mainembed(`‚úß **__ ŸÑÿπÿ®Ÿá ÿ±ŸàŸÑŸäÿ™ __** ‚úß`, `Roulette`, this.name);
      const button_1 = new ButtonBuilder().setLabel("Join Game").setCustomId("joingame").setStyle(ButtonStyle.Secondary);
      const button_2 = new ButtonBuilder().setLabel("Leave Game").setCustomId("leftgame").setStyle(ButtonStyle.Secondary);
  
      const actionRows = new ActionRowBuilder<ButtonBuilder>().addComponents(button_1, button_2);
      const msg = await message.reply({ embeds: [emb], components: [actionRows] });
  
      if (!findData) {
        await new schemaGame({
          guildId: message.guild?.id,
          channelId: message.channel.id,
          players: [],
        }).save();
      }
  
      idMap.set(`${message.guild?.id}-${message.channel.id}`, {
        guildId: message.guild?.id ?? "",
        channelId: message.channel.id,
        number: 0,
      });
  
      setTimeout(async function () {
        const disabledRow = new ActionRowBuilder<ButtonBuilder>().addComponents(
          button_1.setDisabled(true),
          button_2.setDisabled(true)
        );
  
        await msg.edit({ components: [disabledRow] });
        
        const gameData = await schemaGame.findOne({
          guildId: message.guild?.id,
          channelId: message.channel.id,
        });
        if (gameData) {
          await gameData.updateOne({ players: playersMap });
        }
      }, 5000);
  
      const buttons = playersMap.map((data) =>
        new ButtonBuilder()
          .setCustomId(`kick_${data.user.id}`)
          .setStyle(ButtonStyle.Secondary)
          .setLabel(data.username)
      );
  
      const rows = createButtonRows(buttons);
      const msglast = await msg.channel.send({ components: rows });
  
      this.client.on("interactionCreate", async (i) => {
        if (!i.isButton()) return;
  
        if (i.customId.startsWith("kick")) {
          const [, kickedUserId] = i.customId.split('_');

          const updatedRows = msglast.components.find((btn) => {
            const row = btn.components.some((row) => row.customId?.includes(`_${kickedUserId}_`));
            const rowf = btn.components.find((row) => row.customId?.includes(`_${kickedUserId}_`));
   
           if (row) {

             btn.components.map((component) => {
               if (component.customId?.includes(`_${kickedUserId
               }_`) && rowf ) {
                ButtonBuilder.from(rowf)
             }
             });
          }
          });
  
          await msglast.edit({ components: updatedComponents });
        }
  
        if (i.customId === "joingame") {
          const username = i.user.username;
          const key = `${message.guild?.id}-${message.channel.id}`;
  
          const data = idMap.get(key);
          if (data) {
            emb.addFields({
              name: `@${username}`,
              value: `#${data.number}`,
              inline: false,
            });
  
            await i.update({ embeds: [emb] });
  
            await new schemaPlayer({
              guildId: message.guild?.id,
              userId: i.user.id,
              id: data.number,
            }).save();
  
            playersMap.push({
              user: i.user,
              username,
              number: data.number,
              image: i.user.displayAvatarURL({ size: 256, extension: "png" }),
            });
            data.number += 1;
          }
        }
      });
  
      function createButtonRows(buttons: ButtonBuilder[]): ActionRowBuilder<MessageActionRowComponentBuilder>[] {
        const rows: ActionRowBuilder<MessageActionRowComponentBuilder>[] = [];
        for (let i = 0; i < buttons.length; i += 5) {
          const row = new ActionRowBuilder<ButtonBuilder>().addComponents(buttons.slice(i, i + 5));
          rows.push(row);
        }
        return rows;
      }
    } catch (err) {
      console.log(err);
    }
  }
  